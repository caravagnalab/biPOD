d <- sim_noisy(10000, 1.2, 2, 1, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
Ns = x$counts$count
d <- sim_noisy(10000, 1.2, 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
Ns = x$counts$count
Ts = x$counts$time
fix_rates = 0
factor_size = 1
prior_par = 10
data_model <- list(
S = length(Ns) - 1,
n0 = as.integer(Ns[1] / factor_size),
y0 = as.integer(Ns[1] / factor_size),
N = as.integer(Ns[2:length(Ns)] / factor_size),
T = Ts[2:length(Ts)], # Ts[length(Ts)],
k = fix_rates,
prior_par = prior_par
)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
fit_model
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
Ns = x$counts$count
Ts = x$counts$time
fix_rates = 0
factor_size = 1
factor_size = 1
data_model <- list(
S = length(Ns) - 1,
n0 = as.integer(Ns[1] / factor_size),
N = as.integer(Ns[2:length(Ns)] / factor_size),
T = Ts[2:length(Ts)], # Ts[length(Ts)],
k = 0,
prior_par = 10
)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
fit_model
data_model <- list(
S = length(Ns) - 1,
n0 = as.integer(Ns[1] / factor_size),
N = as.integer(Ns[2:length(Ns)] / factor_size),
T = Ts[2:length(Ts)], # Ts[length(Ts)],
k = 1,
prior_par = 10
)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
fit_model
rstan::traceplot(fit_model, pars="ro")
bayesplot::mcmc_areas(as.matrix(fit_model), pars=c("ro[1]"))
bayesplot::mcmc_areas(as.matrix(fit_model), pars=c("ro"))
bayesplot::mcmc_areas(as.matrix(fit_model), pars="ro")
bayesplot::mcmc_areas(as.matrix(fit_model, pars="ro"), pars="ro")
bayesplot::mcmc_areas(as.matrix(fit_model, pars="ro"))
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
Ns = x$counts$count
Ts = x$counts$time
factor_size = 1
data_model <- list(
S = length(Ns) - 1,
n0 = as.integer(Ns[1] / factor_size),
N = as.integer(Ns[2:length(Ns)] / factor_size),
T = Ts[2:length(Ts)], # Ts[length(Ts)],
k = 1,
prior_par = 10
)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
fit_model
rstan::traceplot(fit_model, pars="ro")
bayesplot::mcmc_areas(as.matrix(fit_model, pars="ro"))
y_rep <- rstan::extract(fit_model, pars="N_rep")
y_rep <- rstan::extract(fit_model, pars="N_rep")$N_rep
y <- Ns
y <- Ns[2:length(Ns)]
bayesplot::ppc_bars(y = y, yrep = y_rep)
View(y_rep)
View(y_rep)
class(y_rep)
f <- function(N) {
sample(1:4, size = N, replace = TRUE, prob = c(0.25, 0.4, 0.1, 0.25))
}
y <- f(100)
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
Ns = x$counts$count
Ts = x$counts$time
factor_size = 1
data_model <- list(
S = length(Ns) - 1,
n0 = as.integer(Ns[1] / factor_size),
N = as.integer(Ns[2:length(Ns)] / factor_size),
T = Ts[2:length(Ts)], # Ts[length(Ts)],
k = 1,
prior_par = 10
)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
fit_model
12213.48 * exp(0.2)
10000 * exp(0.2)
10000 * exp(0.2) * exp(0.1)
model <- rstan::stan_model("inst/stan/poisson.stan")
fit_model <- rstan::sampling(
model,
data = data_model, chains=4, iter=8000
)
fit_model
bayesplot::mcmc_areas(as.matrix(fit_model, pars="ro"))
bayesplot::mcmc_areas(as.matrix(fit_model, pars="ro"))
y_rep <- rstan::extract(fit_model, pars="N_rep")$N_rep
y <- Ns[2:length(Ns)]
bayesplot::ppc_bars(y = y, yrep = y_rep)
document()
check()
pkgbuild::check_build_tools(debug = T)
setwd("~/Desktop/dottorato/biPOD")
pkgbuild::check_build_tools(debug = TRUE)
load_all()
pkgbuild::compile_dll()
check()
pkgbuild::check_build_tools(debug = TRUE)
library(biPOD)
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, prior_par = 10, fix_rates = 0)
x <- biPOD::fit_exp(x, model_type = "poisson", prior_par = 10, fix_rates = 0)
x <- biPOD::fit_exp(x, model_type = "poisson", prior_par = 10, fix_rates = 0)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
library(devtools)
load_all()
document()
load_all()
check()
install.packages("devtools")
install.packages("devtools")
library(devtools)
check()
load_all()
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
document()
load_all()
load_all()
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
library(biPOD)
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
document()
load_all()
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
biPOD::posterior_plot(x, param_name = "birth")
biPOD::posterior_plot(x, param_name = "ro")
load_all()
biPOD::posterior_plot(x, param_name = "ro")
x <- rnorm()
x <- rnorm(1)
x
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
names(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
names(x)
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, 0)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 0)
x$fit
names(x$fit)
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")
yrep <- as.matrix(rstan::extract(x$fit, pars="N_rep"))
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
biPOD::posterior_plot(x, param_name = "ro")
names(x$fit)
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
d <- sim_noisy(10000, c(1.2, 1.1, 1.0), 1, 3, 1, .05)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
biPOD::posterior_plot(x, param_name = "ro")
names(x$fit)
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
x$fit
d <- sim_stochastic(100, c(1.2, 1.1, 1.0), 1, 3, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
d <- sim_noisy(100, c(1.2, 1.1, 1.0), 1, 3, 1, .05)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
bayesplot::ppc_intervals(y, yrep)
d <- sim_noisy(100, c(1.2, 1.1, 1.0), 1, 3, 1, .05)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
mean(yrep)
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
View(yrep)
View(yrep)
bayesplot::ppc_intervals(y, yrep)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
d <- sim_stochastic(10000, c(1.2, 1.1, 1.0), 1, 3, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
d <- sim_noisy(100, c(1.2, 1.1, 1.0), 1, 3, 1, .05)
library(devtools)
d <- sim_stochastic(1000, c(1.2, 1.1, 1.0), 1, 3, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
load_all()
d <- sim_stochastic(1000, c(1.2, 1.1, 1.0), 1, 3, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
bayesplot::ppc_intervals(y, yrep)
bayesplot::ppc_ribbon(y, yrep)
bayesplot::ppc_ribbon(y, yrep, y_draw = "points")
d <- sim_stochastic(1000, c(1.2, 1.1, 1.0), 1, 10, 1)
d <- sim_stochastic(1000, rnorm(10, 1, 0.2), 1, 10, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
timesteps = 10
lambdas = rnorm(timesteps, 1, 0.2)
d <- sim_noisy(100, lambdas, 1, timesteps, 1, .05)
d <- sim_stochastic(1000, lambdas, 1, timesteps, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
y <- x$counts$count[2:length(x$counts$count)]
yrep <- rstan::extract(x$fit, pars="N_rep")$N_rep
bayesplot::ppc_intervals(y, yrep)
bayesplot::ppc_ribbon(y, yrep, y_draw = "points")
x <- biPOD::fit_exp(x, model_name = "exact", prior_par = 2, fix_rates = 1)
color_scheme_set("teal")
bayesplot::ppc_intervals(y, yrep)
bayesplot::color_scheme_set("teal")
bayesplot::ppc_intervals(y, yrep)
bayesplot::ppc_ribbon(y, yrep, y_draw = "points")
bayesplot::ppc_intervals(y, yrep) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_intervals(y, yrep, size=3) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_ribbon(y, yrep, y_draw = "points", size=1)
bayesplot::ppc_ribbon(y, yrep, y_draw = "points", size=.25)
bayesplot::ppc_ribbon(y, yrep, y_draw = "points", size=1)
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count") + my_ggplot_theme()
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count"
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count") + my_ggplot_theme()
document()
load_all()
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count") + my_ggplot_theme()
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count")
bayesplot::ppc_intervals(y, yrep, size=1) + ggplot2::xlab("Time") + ggplot2::ylab("Count") + theme_light()
document()
document()
load_all()
timesteps = 10
lambdas = rnorm(timesteps, 1, 0.2)
d <- sim_noisy(100, lambdas, 1, timesteps, 1, .05)
d <- sim_stochastic(1000, lambdas, 1, timesteps, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "exact", prior_par = 10, fix_rates = 1)
d <- sim_stochastic(1000, lambdas, 1, timesteps, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
biPOD::ppc_plot(x, "ribbon")
biPOD::ppc_plot(x, "intervals")
biPOD::ppc_plot(x, "ribbon")
document()
load_all()
biPOD::evolution_plot(x)
document()
load_all()
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
biPOD::ppc_plot(x, "ribbon")
bayesplot::mcmc_areas_ridges(x$fit, pars="ro")
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), pars="ro")
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro")
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro") + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", border_size = .75) + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro") + my_ggplot_theme()
as.matrix(x$fit)
bayesplot::mcmc_dens_overlay(as.matrix(x$fit), regex_pars = "ro") + my_ggplot_theme()
bayesplot::mcmc_dens_overlay(x$fit, regex_pars = "ro") + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro") + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = .5, prob_outer = .95) + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = .5, prob_outer = 1) + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = .95, prob_outer = 1) + my_ggplot_theme()
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 0) + my_ggplot_theme()
bayesplot::color_scheme_set("blue")
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) + my_ggplot_theme()
bayesplot::color_scheme_set("teal")
bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) + my_ggplot_theme()
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) + my_ggplot_theme()
p$coordinates$limits
rstan::extract(x$fit, pars="ro")
max(rstan::extract(x$fit, pars="ro"))
max(rstan::extract(x$fit, pars="ro")$ro)
min(rstan::extract(x$fit, pars="ro")$ro)
p = "ro"
x_values <- rstan::extract(x$fit, pars="ro")$p
x_values <- rstan::extract(x$fit, pars="ro")[p]
View(x_values)
x_values <- rstan::extract(x$fit, pars="ro")[1]
x_values <- rstan::extract(x$fit, pars="ro")[[1]]
max(x_values) * 0.025
View(x_values)
x_values <- rstan::extract(x$fit, pars="ro")[[1]]
p = "ro"
x_values <- rstan::extract(x$fit, pars="ro")[[1]]
max(x_values)
min(x_values)
dx <- (max(x_values) - min(x_values))
dx <- (max(x_values) - min(x_values)) * 0.025
p <- p + ggplot2::xlim(dx)
p <- p + ggplot2::xlim(x(-.5, .25))
p <- p + ggplot2::xlim(c(-.5, .25))
p
p <- p + ggplot2::xlim(-.5, .25)
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) + my_ggplot_theme()
p <- p + ggplot2::xlim(-.5, .25)
p
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) + my_ggplot_theme()
x_values <- rstan::extract(x$fit, pars="ro")[[1]]
x_values <- rstan::extract(x$fit, pars="ro")[[1]]
x_max = max(x_values)
x_min = min(x_values)
dx <- (max(x_values) - min(x_values)) * 0.025
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) +
ggplot2::xlim(x_min - dx, x_max + dx) +
my_ggplot_theme()
p
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1)
p$scales
p$scales$scales
p$scales
p$scales$scales
p$scales$scales[[4]]
p$scales$scales[[4]][0]
p$scales$scales[[4]]$limits
p$scales$scales[[4]]$limits[0]
p$scales$scales[[4]]$limits[1]
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1)
p <- bayesplot::mcmc_areas_ridges(as.matrix(x$fit), regex_pars = "ro", prob = 1) +
my_ggplot_theme()
x_min <- p$scales$scales[[4]]$limits[1]
x_max <- p$scales$scales[[4]]$limits[2]
x$fit_info$prior_par
Ys <- dnorm(0, x$fit_info$prior_par)
p.prior <- ggplot(prior_data) + geom_density(Ys)
prior_data = data.frame(x=Xs, y=Ys)
p.prior <- ggplot(prior_data) + geom_density(Ys)
Xs <- seq(x_min, x_max, length = 1000)
Ys <- dnorm(0, x$fit_info$prior_par)
prior_data = data.frame(x=Xs, y=Ys)
p.prior <- ggplot(prior_data) + geom_density(Ys)
p.prior <- ggplot(prior_data, aes(x=x, y=y) + geom_density()
p.prior <- ggplot(prior_data, aes(x=x, y=y)) + geom_density()
p.prior <- ggplot(prior_data, aes(x=x, y=y)) + geom_density()
p.pr
p.prior
Ys <- dnorm(0, 1)
prior_data = data.frame(x=Xs, y=Ys)
p.prior <- ggplot(prior_data, aes(x=x, y=y)) + geom_density()
p.prior
names(x$fit)
document()
load_all()
timesteps = 10
lambdas = rnorm(timesteps, 1, 0.2)
d <- sim_noisy(1000, lambdas, 1, timesteps, 1, .05)
d <- sim_stochastic(1000, lambdas, 1, timesteps, 1)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
biPOD::ppc_plot(x, "ribbon")
biPOD::posterior_plot(x, "ro")
document()
load_all()
biPOD::posterior_plot(x, "ro")
print(lambdas - mu)
print(lambdas - 1)
timesteps = 10
lambdas = rnorm(timesteps, 1, 0.2)
mus = 1
dt = 1
noise = .05
n0 = 1000
d <- sim_noisy(n0, lambdas, mus, timesteps, dt, noise)
d <- sim_stochastic(n0, lambdas, mus, timesteps, dt)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
x$fit
biPOD::ppc_plot(x, "ribbon")
biPOD::posterior_plot(x, "ro")
print(lambdas - mu)
print(lambdas - mus)
document()
check()
usethis::use_package("bayesplot")
check()
document()
document()
load_all()
timesteps = 10
lambdas = rnorm(timesteps, 1, 0.2)
mus = 1
dt = 1
noise = .05
n0 = 1000
d <- sim_noisy(n0, lambdas, mus, timesteps, dt, noise)
d <- sim_stochastic(n0, lambdas, mus, timesteps, dt)
x <- biPOD::init(d, "s0")
biPOD::evolution_plot(x)
document()
load_all()
biPOD::evolution_plot(x)
biPOD::evolution_plot(x)
biPOD::ppc_plot(x, "ribbon")
x <- biPOD::fit_exp(x, model_name = "poisson", prior_par = 10, fix_rates = 1)
biPOD::ppc_plot(x, "ribbon")
biPOD::evolution_plot(x)
document()
document()
document()
check()
