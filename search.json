[{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://caravagnalab.github.io/biPOD/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://caravagnalab.github.io/biPOD/articles/a1_introduction.html","id":"input-format","dir":"Articles","previous_headings":"","what":"Input format","title":"1. Introduction","text":"input biPOD tibble two columns: time denotes instant time observation collected count contains values observations proxy population size (e.g. number cells, volume, …) biPOD comes template dataset.","code":"# Load template data data(\"xenografts\", package = \"biPOD\")"},{"path":"https://caravagnalab.github.io/biPOD/articles/a1_introduction.html","id":"initialisation-of-a-new-dataset","dir":"Articles","previous_headings":"","what":"Initialisation of a new dataset","title":"1. Introduction","text":"use biPOD need initialize bipod object initialisation function init. create new object required explicit sample name. Additionally, since biPOD might deal longitudinal observations coming different time windows (e.g Natural evolution, Treatment, Relapse,…) divided set breakpoints, user also input known. (see )","code":""},{"path":"https://caravagnalab.github.io/biPOD/articles/a1_introduction.html","id":"example-bipod-object","dir":"Articles","previous_headings":"","what":"Example biPOD object","title":"1. Introduction","text":"Let’s use one sample coming xenograft data along made set breakpoints. look modified counts see observations grouped different time windows","code":"mouse_id <- 529 x <- biPOD::init(   counts = xenografts %>% dplyr::filter(mouse == mouse_id) %>% dplyr::mutate(count = tumour_volume),   sample = mouse_id,   break_points = c(0, 20) ) #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #> ℹ Using sample named: 529. #> ! No group column present in input dataframe! A column will be added. biPOD::plot_input(x, add_highlights = T)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"2. Fitting dynamics with known breakpoints","text":"take xenografts data make ready inference preparing count column dividing time column factor 7 (order work unit time week).","code":"data(\"xenografts\", package = \"biPOD\") xenografts <- xenografts %>%   dplyr::rename(count = tumour_volume) %>%   dplyr::mutate(time = time / 7)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"fit---variational-and-no-breakpoints","dir":"Articles","previous_headings":"","what":"Fit - Variational and no breakpoints","title":"2. Fitting dynamics with known breakpoints","text":"Let’s take sample undergo treatment therefore exhibit natural growth single parameter. Hence, going consider breakpoints sample. bipod object initialized possible visualize data using plot_input function.  Now, fit data first task one use fit function. want fit one specific type growth (exponential logistic) pass one two parameter growth_type. Otherwise, want test choose best one set growth_type parameter . Sometimes might helpful scale input data factor_size, counts divided . population decreasing growing extremely slowly (ρ∼0\\rho \\sim 0) instant time population born might impossible infer. deal situations, t0t_0 interest, just set infer_t0 parameter FALSE. order use Variational Inference algorithm suffice set variational parameter TRUE.","code":"mouse_id <- 537 d <- xenografts %>% dplyr::filter(mouse == mouse_id) x <- biPOD::init(   counts = d,   sample = mouse_id,   break_points = NULL ) #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #> ℹ Using sample named: 537. #> ! No group column present in input dataframe! A column will be added. biPOD::plot_input(x, log_scale = F, add_highlights = T) x <- biPOD::fit(   x,   growth_type = \"both\",   model_selection_algo = \"mixture_model\",   factor_size = 1,   variational = T ) #> ℹ Fitting with model selection. #> ! The first step of the inference will be performed using MCMC..."},{"path":[]},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"diagnostics","dir":"Articles","previous_headings":"Plot - Variational and no breakpoints","what":"Diagnostics","title":"2. Fitting dynamics with known breakpoints","text":"first plot look one regarding diagnostic inference. case, used VI, going look ELBO. , let’s use plot_elbo function requires bipod object specification elbo data want use since might multiple perform different task object.","code":"biPOD::plot_elbo(x, elbo_data = x$fit_elbo, diagnose = T)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"plot-of-fit","dir":"Articles","previous_headings":"Plot - Variational and no breakpoints","what":"Plot of fit","title":"2. Fitting dynamics with known breakpoints","text":"Use function plot_fit plot fit resulting inference first task. Set zoom TRUE better view observations full_process TRUE also plot inferred value t0t_0.","code":"biPOD::plot_fit(x = x, zoom = T, full_process = T)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"plot-posteriors","dir":"Articles","previous_headings":"Plot - Variational and no breakpoints","what":"Plot posteriors","title":"2. Fitting dynamics with known breakpoints","text":"can use general function plot_posterior plot posterior given parameters (use plot_posteriors set parameters). names available parameters can found one fit objects inside bipod object. example case let’s plot t0t_0.","code":"print(x$fit$parameters) #>  [1] \"lp__\"        \"lp_approx__\" \"rho[1]\"      \"t0\"          \"K\"           #>  [6] \"log_lik[1]\"  \"log_lik[2]\"  \"log_lik[3]\"  \"log_lik[4]\"  \"log_lik[5]\"  #> [11] \"log_lik[6]\"  \"log_lik[7]\"  \"log_lik[8]\"  \"log_lik[9]\"  \"log_lik[10]\" #> [16] \"log_lik[11]\" \"log_lik[12]\" \"log_lik[13]\" \"log_lik[14]\" \"log_lik[15]\" #> [21] \"log_lik[16]\" \"log_lik[17]\" \"log_lik[18]\" \"log_lik[19]\" \"log_lik[20]\" #> [26] \"yrep[1]\"     \"yrep[2]\"     \"yrep[3]\"     \"yrep[4]\"     \"yrep[5]\"     #> [31] \"yrep[6]\"     \"yrep[7]\"     \"yrep[8]\"     \"yrep[9]\"     \"yrep[10]\"    #> [36] \"yrep[11]\"    \"yrep[12]\"    \"yrep[13]\"    \"yrep[14]\"    \"yrep[15]\"    #> [41] \"yrep[16]\"    \"yrep[17]\"    \"yrep[18]\"    \"yrep[19]\"    \"yrep[20]\" biPOD::plot_posterior(   x,   x_fit = x$fit,   par_name = \"t0\",   color = \"maroon\" )"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"model-selection","dir":"Articles","previous_headings":"Plot - Variational and no breakpoints","what":"Model selection","title":"2. Fitting dynamics with known breakpoints","text":"Since selected exponential logistic also possibility visualize decision. case, used mixture_model algorithm can plot using ``","code":"biPOD::plot_mixture_model_omega(x, plot_type = \"boxplot\", color = \"forestgreen\")"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"fit---mcmc-and-with-breakpoints","dir":"Articles","previous_headings":"","what":"Fit - MCMC and with breakpoints","title":"2. Fitting dynamics with known breakpoints","text":"Let’s now consider sample undergoes treatment therefore exhibit multiple growth rates. tutorial work two manually chosen breakpoints (.e 0 7). Now input grouped different time windows, can also seen plotting .  Let’s use fit function. want use MCMC algorithm make sure set variational parameter FALSE. Moreover, going use bayes_factor model selection algorithm.","code":"mouse_id <- 543 d <- xenografts %>% dplyr::filter(mouse == mouse_id) x <- biPOD::init(   counts = d,   sample = mouse_id,   break_points = c(0, 7) ) #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #> ℹ Using sample named: 543. #> ! No group column present in input dataframe! A column will be added. biPOD::plot_input(x, log_scale = T, add_highlights = T) x <- biPOD::fit(   x,   growth_type = \"both\",   model_selection_algo = \"bayes_factor\",   variational = FALSE )"},{"path":[]},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"diagnostics-1","dir":"Articles","previous_headings":"Plot - MCMC and with breakpoints","what":"Diagnostics","title":"2. Fitting dynamics with known breakpoints","text":"Let’s plot diagnostic inference. case, used MCMC, going look chains see ’ve mixed properly. , let’s use plot_traces function requires bipod object specification fit want use since might multiple perform different task object.","code":"biPOD::plot_traces(x, fit = x$fit, pars = NULL, diagnose = T) #> ℹ The input vector 'pars' is empty. All the following parameters will be #> reported: \"lp__\", \"rho[1]\", \"rho[2]\", \"rho[3]\", \"t0\", \"K\", \"log_lik[1]\", #> \"log_lik[2]\", \"log_lik[3]\", \"log_lik[4]\", \"log_lik[5]\", \"log_lik[6]\", #> \"log_lik[7]\", \"log_lik[8]\", \"log_lik[9]\", \"log_lik[10]\", \"log_lik[11]\", #> \"log_lik[12]\", …, \"yrep[22]\", and \"yrep[23]\".  It might take some time..."},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"plot-of-fit-1","dir":"Articles","previous_headings":"Plot - MCMC and with breakpoints","what":"Plot of fit","title":"2. Fitting dynamics with known breakpoints","text":"Let’s use function plot_fit. can change legend using parameter legend_labels legend_title.","code":"biPOD::plot_fit(x = x, legend_labels = c(\"Natural growth\", \"Treatment\", \"Relapse\"), legend_title = \"Phase\")"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"plot-of-posteriors","dir":"Articles","previous_headings":"Plot - MCMC and with breakpoints","what":"Plot of posteriors","title":"2. Fitting dynamics with known breakpoints","text":"Let’s use plot_posteriors function plot growth rates one .","code":"biPOD::plot_posteriors(   x,   x_fit = x$fit,   par_list = c(\"rho[1]\", \"rho[2]\", \"rho[3]\") )"},{"path":"https://caravagnalab.github.io/biPOD/articles/a2_task1.html","id":"model-selection-1","dir":"Articles","previous_headings":"Plot - MCMC and with breakpoints","what":"Model selection","title":"2. Fitting dynamics with known breakpoints","text":"finally, let’s plot Bayes factor using plot_bayes_factor function.","code":"biPOD::plot_bayes_factor(x, with_categories = F)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a3_task2.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"3. Inferring uknwokn breakpoints","text":"take xenografts data make ready inference preparing count column dividing time column factor 7 (order work unit time week). select sample 543, already presented previous vignette.","code":"data(\"xenografts\", package = \"biPOD\") mouse_id <- 543 d <- xenografts %>%   dplyr::rename(count = tumour_volume) %>%   dplyr::mutate(time = time / 7) %>%   dplyr::filter(mouse == mouse_id)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a3_task2.html","id":"breakpoints-inference","dir":"Articles","previous_headings":"","what":"Breakpoints inference","title":"3. Inferring uknwokn breakpoints","text":"can infer breakpoints following way. initialized bipod object breakpoints can use function fit_breakpoints. reasonably know possible number breakpoints, pass vector available_changepoints.  inferred breakpoints now stored metadata$breakpoints field. posterior distribution can visualized using plot_breakpoints_posterior function","code":"x <- biPOD::init(d, sample = mouse_id, break_points = NULL) #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #> ℹ Using sample named: 543. #> ! No group column present in input dataframe! A column will be added. biPOD::plot_input(x) x <- biPOD::fit_breakpoints(x, norm = T, n_trials = 500, avg_points_per_window = 3, available_changepoints = c(0,2), model_selection = \"LOO\", n_core=1) #> ℹ Intializing breakpoints... #> ℹ Breakpoints optimization... #> ℹ Choosing optimal breakpoints... #> ℹ Median of the inferred breakpoints have been succesfully stored. x #> ── [ biPOD ] 23 observations divided in 3 time windows. ──────────────────────── #>  #> ── Break-points inference  PASS  Mean rhat = 1. ──────────────────────────────── #> ℹ  Number of breakpoints inferred : 2 #> # A tibble: 2 × 7 #>   Parameter    Mean     Sd    p05     p50     p95  Rhat #>   <chr>       <dbl>  <dbl>  <dbl>   <dbl>   <dbl> <dbl> #> 1 b[1]      -1.04   0.0909 -1.20  -1.04   -0.899  1.00  #> 2 b[2]      -0.0390 0.0636 -0.137 -0.0403  0.0658 1.000 print(x$metadata$breakpoints) #> [1] 0.2279489 7.2863543 biPOD::plot_breakpoints_posterior(x)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a3_task2.html","id":"re-fit-task-1","dir":"Articles","previous_headings":"","what":"Re-fit task 1","title":"3. Inferring uknwokn breakpoints","text":"Now breakpoints inferred one can fit data according first task simply using fit function. Let’s see works one example. let’s look final result.","code":"x <- biPOD::fit(   x,   growth_type = \"both\",   infer_t0 = F ) #> ℹ Fitting with model selection. #> ℹ Model selection finished! #> ℹ Model with \"Logistic\" growth deemed better with \"Decisive\" evidence. (BF = 1.0155778574137e+24) biPOD::plot_report(x, fit_type = 'simple') #> ℹ Creating report... #> ℹ Preparing fit plot... #> ℹ Preparing breakpoints posterior plot... #> ℹ Preparing growth rates posterior plot... #> ℹ Preparing model selection plot..."},{"path":"https://caravagnalab.github.io/biPOD/articles/a4_task3.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"4. Fitting a mixture of resistant-sensitive population","text":"take xenografts data make ready inference preparing count column dividing time column factor 7 (order work unit time week). select sample 543, already presented previous vignette filter observations prior treatment.","code":"data(\"xenografts\", package = \"biPOD\") mouse_id <- 543 d <- xenografts %>%   dplyr::rename(count = tumour_volume) %>%   dplyr::mutate(time = time / 7) %>%   dplyr::filter(time >= 0) %>%    dplyr::filter(mouse == mouse_id) x <- biPOD::init(d, \"543 U-shape\") #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #> ℹ Using sample named: 543 U-shape. #> ! No group column present in input dataframe! A column will be added. biPOD::plot_input(x)"},{"path":"https://caravagnalab.github.io/biPOD/articles/a4_task3.html","id":"two-population-model","dir":"Articles","previous_headings":"","what":"Two population model","title":"4. Fitting a mixture of resistant-sensitive population","text":"model assumes two populations exist, one dying one growing growth rates positive constant sensible population must present x=0 apply resistant one able infer tst_s, instant time sensitive population dies trt_r, instant time resistant population born ρs\\rho_s, death rate sensitive population ρr\\rho_r, growth rate resistant population , one need use fit_two_pop_model function. fit can visualized single process  splitting depending two different populations","code":"x <- biPOD::fit_two_pop_model(x, variational = F, factor_size = 1) #> ℹ Fitting two population model using MCMC sampling ... #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-21311d04311d.stan', line 29, column 2 to column 18) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4 #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1 #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1 #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1 #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3 #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3 #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3 #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3 #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3 #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. biPOD::plot_two_pop_fit(x, split_process = F, f_posteriors = F, t_posteriors = F, r_posteriors = F) biPOD::plot_two_pop_fit(x, split_process = T, f_posteriors = F, t_posteriors = F, r_posteriors = F)"},{"path":"https://caravagnalab.github.io/biPOD/articles/biPOD.html","id":"what-is-bipod","dir":"Articles","previous_headings":"","what":"What is biPOD?","title":"Get started","text":"biPOD R package model-based Bayesian inference population dynamics heterogeneous longitudinal data. supports: () fitting growth known breakpoints, (ii) inferring breakpoints unknown, (iii) two-population (sensitive/resistant) model typical treatment–relapse settings.","code":""},{"path":"https://caravagnalab.github.io/biPOD/articles/biPOD.html","id":"quick-tour-with-the-built-in-dataset","dir":"Articles","previous_headings":"","what":"1) Quick tour with the built-in dataset","title":"Get started","text":"package ships xenografts mouse model dataset: initialize bipod object plot inputs:","code":"data(xenografts) head(xenografts) mouse_id = 544 df = xenografts %>%    dplyr::filter(mouse == mouse_id) %>%    dplyr::mutate(count = tumour_volume) x <- init(counts = df, sample = unique(df$mouse), break_points = NULL) plot_input(x)"},{"path":"https://caravagnalab.github.io/biPOD/articles/biPOD.html","id":"fit-with-known-breakpoints","dir":"Articles","previous_headings":"1) Quick tour with the built-in dataset","what":"Fit with known breakpoints","title":"Get started","text":"Suppose change-points (e.g., treatment start end) known:","code":"x <- biPOD::init(   counts = df,   sample = mouse_id,   break_points = c(0, 50) ) x <- biPOD::fit(   x = x,    growth_type = \"exponential\",    infer_t0 = T ) plot_fit(x) plot_posteriors(x = x, x_fit = x$fit, par_list = c(\"rho[1]\", \"rho[2]\", \"rho[3]\"))     # posterior densities for parameters"},{"path":"https://caravagnalab.github.io/biPOD/articles/biPOD.html","id":"infer-breakpoints","dir":"Articles","previous_headings":"1) Quick tour with the built-in dataset","what":"Infer breakpoints","title":"Get started","text":"transition times unknown, estimate directly data:","code":"x <- biPOD::init(   counts = df,   sample = mouse_id,   break_points = NULL ) x <- biPOD::fit_breakpoints(x = x, available_changepoints = 0:2) plot_breakpoints_posterior(x) + ggplot2::geom_vline(xintercept = c(0, 50))"},{"path":"https://caravagnalab.github.io/biPOD/articles/biPOD.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Get started","text":"","code":"sessionInfo()"},{"path":"https://caravagnalab.github.io/biPOD/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giovanni Santacatterina. Author, maintainer.","code":""},{"path":"https://caravagnalab.github.io/biPOD/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Santacatterina G (2025). biPOD: biPOD. R package version 0.1, https://caravagnalab.github.io/biPOD/.","code":"@Manual{,   title = {biPOD: biPOD},   author = {Giovanni Santacatterina},   year = {2025},   note = {R package version 0.1},   url = {https://caravagnalab.github.io/biPOD/}, }"},{"path":"https://caravagnalab.github.io/biPOD/index.html","id":"bipod-","dir":"","previous_headings":"","what":"biPOD","title":"biPOD","text":"biPOD package infer kinetic parameters evolving population whose size observed discrete intervals time. tool able : Calculating exponential growth rates different time periods (e.g., treatment phase, relapse phase) Determining upper limit population’s birth time growth observed initial window Handling multiple time windows predefined change points Analyzing population size data detect significant changes growth patterns Computing likely moments population behavior shifts Optimizing placement change points best fit observed data Inferring separate growth rates resistant sensitive cell populations Determining birth time resistant population Calculating death time sensitive population Modeling characteristic U-shaped dynamics emerge interplay populations","code":""},{"path":"https://caravagnalab.github.io/biPOD/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"biPOD","text":"use biPOD, please cite: G. Santacatterina, R. Bergamin, . Zucchetto, R. Laureana, M.. del Principe, V. Gattei, L. Egidi, G. Caravagna. Predicting tumour evolution drug resistance heterogenous longitudinal cancer data. biorxiv (2024).","code":""},{"path":[]},{"path":[]},{"path":"https://caravagnalab.github.io/biPOD/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"biPOD","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"caravagnalab/biPOD\")"},{"path":"https://caravagnalab.github.io/biPOD/index.html","id":"copyright-and-contacts","dir":"","previous_headings":"Installation","what":"Copyright and contacts","title":"biPOD","text":"Cancer Data Science (CDS) Laboratory, University Trieste, Italy.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD-package.html","id":null,"dir":"Reference","previous_headings":"","what":"biPOD: biPOD — biPOD-package","title":"biPOD: biPOD — biPOD-package","text":"biPOD .","code":""},{"path":[]},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"biPOD: biPOD — biPOD-package","text":"Maintainer: Giovanni Santacatterina santacatterinagiovanni@gmail.com","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_dens_overlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlay Posterior Predictive Density — biPOD_ppc_dens_overlay","title":"Overlay Posterior Predictive Density — biPOD_ppc_dens_overlay","text":"Creates density plot overlaying posterior predictive density observed data. plot allows compare distribution observed data distribution predicted model, using posterior predictive draws. useful evaluating well model captures data distribution.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_dens_overlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlay Posterior Predictive Density — biPOD_ppc_dens_overlay","text":"","code":"biPOD_ppc_dens_overlay(x, x_fit, n = 500)"},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_dens_overlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlay Posterior Predictive Density — biPOD_ppc_dens_overlay","text":"x bipod object containing 'counts' field observed data. data typically time series count data. x_fit fitted model object contains posterior draws replicated data (yrep). model fitted data. n integer specifying number posterior predictive draws use plot. (default 500). draws used, smoother density overlay .","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_dens_overlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlay Posterior Predictive Density — biPOD_ppc_dens_overlay","text":"density plot generated using bayesplot::ppc_dens_overlay. plot overlays posterior predictive distribution observed data.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Predictive Intervals Plot — biPOD_ppc_intervals","title":"Posterior Predictive Intervals Plot — biPOD_ppc_intervals","text":"Creates plot displaying posterior predictive intervals observed data, providing visual assessment well model captures data variation time. plot shows credible intervals (uncertainty) posterior predictive distribution time point.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Predictive Intervals Plot — biPOD_ppc_intervals","text":"","code":"biPOD_ppc_intervals(x, x_fit, n = 500)"},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Predictive Intervals Plot — biPOD_ppc_intervals","text":"x bipod object containing 'counts' field observed data. data typically represents counts time series values. x_fit fitted model object containing posterior draws replicated data (yrep). object include posterior samples model predictions. n integer specifying number posterior predictive draws use plot. (default 500). higher number, accurate representation predictive intervals.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Predictive Intervals Plot — biPOD_ppc_intervals","text":"plot displaying posterior predictive intervals generated using bayesplot::ppc_intervals. plot shows well model accounts observed data.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_ribbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Predictive Ribbon Plot — biPOD_ppc_ribbon","title":"Posterior Predictive Ribbon Plot — biPOD_ppc_ribbon","text":"Creates ribbon plot showing central credible intervals (CI) outer intervals posterior predictive distribution. plot helps visualize well model fits observed data across range probability intervals. can used assess model's ability capture central tendency variation data.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_ribbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Predictive Ribbon Plot — biPOD_ppc_ribbon","text":"","code":"biPOD_ppc_ribbon(x, x_fit, n = 500, prob = 0.5, prob_outer = 0.9)"},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_ribbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Predictive Ribbon Plot — biPOD_ppc_ribbon","text":"x bipod object containing 'counts' field observed data. typically time series count data. x_fit fitted model object containing posterior draws replicated data (yrep). model fitted using Bayesian methods. n integer specifying number posterior predictive draws use plot. (default 500). higher value results stable representation posterior distribution. prob numeric value 0 1 representing probability mass inner interval (e.g., 50% CI). default 0.5. prob_outer numeric value 0 1 representing probability mass outer interval (e.g., 90% CI). default 0.9.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/biPOD_ppc_ribbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Predictive Ribbon Plot — biPOD_ppc_ribbon","text":"ribbon plot created using bayesplot::ppc_ribbon. plot shows posterior predictive distribution shaded regions representing credible intervals different probability levels.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Growth Model to a Bipod Object — fit","title":"Fit a Growth Model to a Bipod Object — fit","text":"function fits specified growth model bipod object, allowing exponential logistic growth fitting. models considered, automatic model selection process determines best fit.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Growth Model to a Bipod Object — fit","text":"","code":"fit(   x,   growth_type = \"exponential\",   infer_t0 = TRUE,   variational = FALSE,   factor_size = 1,   model_selection_algo = \"bayes_factor\",   chains = 4,   iter = 5000,   cores = 4 )"},{"path":"https://caravagnalab.github.io/biPOD/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Growth Model to a Bipod Object — fit","text":"x bipod object containing population count data time. growth_type Character string specifying growth model fit. Options : \"exponential\" – Fits exponential growth model. \"logistic\" – Fits logistic growth model. \"\" – Performs model selection exponential logistic growth. Default \"exponential\". infer_t0 Logical value indicating whether infer initial time population origin (t0). TRUE, t0 estimated part model fitting. Default TRUE. variational Logical value indicating whether use variational inference instead Markov Chain Monte Carlo (MCMC) sampling. TRUE, variational inference applied; otherwise, MCMC used. Default FALSE. factor_size Numeric value used scale population counts bipod object. Must positive larger minimum count value. Default 1. model_selection_algo Character string specifying model selection algorithm growth_type = \"\". Options : \"bayes_factor\" – Compares models using Bayes factors. \"mixture_model\" – Uses mixture modeling approach estimate probabilities. Default \"bayes_factor\". chains Integer specifying number MCMC chains. Ignored variational = TRUE. Default 4. iter Integer specifying number MCMC iterations. Ignored variational = TRUE. Default 5000. cores Integer specifying number CPU cores use parallel processing. Default 4.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Growth Model to a Bipod Object — fit","text":"Returns input bipod object additional attributes: fit – fitted growth model. fit_info – Metadata fitting process, including: Sampling method (MCMC variational inference) Factor size used scaling Selected growth model Model selection details (applicable)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Growth Model to a Bipod Object — fit","text":"","code":"# Create a bipod object with your data data = biPOD::sim_stochastic_exponential(100, 1, 0, 10, .25) x = biPOD::init(data, \"sample\") #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #>  #> ℹ Using sample named: sample. x <- fit(x, growth_type = \"both\", model_selection_algo = \"bayes_factor\") #> ℹ Fitting with model selection. #>  #> ℹ Model selection finished! #> ℹ Model with \"Exponential\" growth deemed better with \"Very strong\" evidence. (BF = 90.9536467166196) biPOD::plot_fit(x, CI = .8)"},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_breakpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and Fit Optimal Breakpoints in Population Growth Data — fit_breakpoints","title":"Identify and Fit Optimal Breakpoints in Population Growth Data — fit_breakpoints","text":"Analyzes population growth data detect significant changes growth patterns : Fitting piecewise linear models log-transformed count data Implementing model selection determine optimal number breakpoints Identifying precise positions growth pattern changes Assigning data points respective growth segments","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_breakpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and Fit Optimal Breakpoints in Population Growth Data — fit_breakpoints","text":"","code":"fit_breakpoints(   x,   norm = TRUE,   n_trials = 500,   avg_points_per_window = 3,   available_changepoints = c(0:5),   model_selection = \"LOO\",   n_core = 4 )"},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_breakpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and Fit Optimal Breakpoints in Population Growth Data — fit_breakpoints","text":"x bipod object containing time series data population counts norm Logical indicating whether standardize data (mean 0, SD 1) fitting. Standardization applies time count data. Default TRUE n_trials Integer controlling optimization iterations. Higher values increase likelihood finding global optima cost longer computation time. Default 500 avg_points_per_window Integer specifying minimum average data points required breakpoints. Prevents overfitting ensuring adequate data density per segment. Default 3 available_changepoints Integer vector defining range breakpoint numbers consider model selection. example, c(0:5) evaluates models 0 5 breakpoints. Default 0:5 model_selection Character string specifying model selection criterion: * \"LOO\": Leave-One-cross-validation (recommended) * \"AIC\": Akaike Information Criterion * \"BIC\": Bayesian Information Criterion Default \"LOO\" n_core Integer specifying number CPU cores parallel processing. Default 4","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_breakpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and Fit Optimal Breakpoints in Population Growth Data — fit_breakpoints","text":"enhanced bipod object containing: breakpoints_fit: Fitted breakpoint model metadata$breakpoints: Vector identified breakpoint positions counts$group: Factor indicating segment membership observation","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_breakpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and Fit Optimal Breakpoints in Population Growth Data — fit_breakpoints","text":"","code":"# Create a bipod object with your data data = biPOD::sim_stochastic_exponential( 100, c(rep(1,5), rep(0,5), rep(1,5)), c(rep(0,5),rep(.25,10)), 15, .1 )  # Fot your dataset x = biPOD::init(data, \"sample w.o breakpoints\") #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #>  #> ℹ Using sample named: sample w.o breakpoints. x = biPOD:::fit_breakpoints(x, n_core=1) #> ℹ Intializing breakpoints... #> ℹ Breakpoints optimization... #> ℹ Choosing optimal breakpoints... #> ℹ Median of the inferred breakpoints have been succesfully stored.  # Plot inferred breakpoints biPOD::plot_breakpoints_posterior(x)"},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_two_pop_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Two-Population Growth Model to a bipod Object — fit_two_pop_model","title":"Fit a Two-Population Growth Model to a bipod Object — fit_two_pop_model","text":"function fits growth model accounts two interacting populations within bipod object. model can fitted using either Variational Inference Markov Chain Monte Carlo (MCMC) sampling.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_two_pop_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Two-Population Growth Model to a bipod Object — fit_two_pop_model","text":"","code":"fit_two_pop_model(   x,   variational = FALSE,   factor_size = 1,   chains = 4,   iter = 5000,   cores = 4 )"},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_two_pop_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Two-Population Growth Model to a bipod Object — fit_two_pop_model","text":"x bipod object containing population count data time. variational Logical, indicating whether use Variational Inference instead MCMC sampling. TRUE, Variational Inference applied; otherwise, MCMC sampling used. Default FALSE. factor_size Numeric, specifying scaling factor population counts bipod object. value must positive appropriately chosen data. Default 1. chains Integer, defining number MCMC chains. parameter ignored variational = TRUE. Default 4. iter Integer, setting number iterations MCMC sampling. parameter ignored variational = TRUE. Default 5000. cores Integer, specifying number CPU cores use parallel computation. Default 4.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_two_pop_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Two-Population Growth Model to a bipod Object — fit_two_pop_model","text":"input bipod object additional attributes: two_pop_fit – fitted two-population growth model. two_pop_fit_info – Metadata related fitting process, including: Sampling method (MCMC Variational Inference) Scaling factor used (factor_size) Diagnostics model fitting process two_pop_plots – list visualization plots, including: Evolutionary trend plots Population growth rates Key time estimates (e.g., emergence resistant populations)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/fit_two_pop_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Two-Population Growth Model to a bipod Object — fit_two_pop_model","text":"","code":"# Load a bipod object data(\"xenografts\", package = \"biPOD\") mouse_id <- 543 d <- xenografts d = dplyr::rename(d, count = tumour_volume) d = dplyr::mutate(d, time = time / 7) d = dplyr::filter(d, time >= 0) d = dplyr::filter(d, mouse == mouse_id) x <- biPOD::init(d, \"543 U-shape\") #>  #> ── biPOD - bayesian inference for Population Dynamics ────────────────────────── #>  #> ℹ Using sample named: 543 U-shape. #> ! No group column present in input dataframe! A column will be added. # Fit a two-population growth model using MCMC x <- biPOD::fit_two_pop_model(x, variational = FALSE, factor_size = 1) #> ℹ Fitting two population model using MCMC sampling ... #>  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131a9a4f8d.stan', line 45, column 2 to column 18) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: poisson_lpmf: Rate parameter[1] is -nan, but must be nonnegative! (in '/tmp/RtmpVK3U8K/model-2131163e4a2.stan', line 44, column 2 to column 18) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. #> Warning: Dropping 'draws_df' class as required metadata was removed. biPOD::plot_two_pop_fit(   x,   split_process = FALSE,   f_posteriors = FALSE,   t_posteriors = FALSE,   r_posteriors = FALSE )"},{"path":"https://caravagnalab.github.io/biPOD/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a biPOD Object — init","title":"Create a biPOD Object — init","text":"function creates bipod object Bayesian inference population dynamics. takes data frame population counts, sample name, optional breakpoints define groups within data.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a biPOD Object — init","text":"","code":"init(counts, sample, break_points = NULL)"},{"path":"https://caravagnalab.github.io/biPOD/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a biPOD Object — init","text":"counts data frame two columns: time: Numeric integer values representing time steps population counts recorded. count: Integer values representing population count time step. sample character string specifying name sample. name stored metadata resulting biPOD object. break_points numeric vector specifying breakpoints define changes population dynamics. provided, breakpoints used group time steps. NULL, grouping applied. (default NULL)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a biPOD Object — init","text":"bipod object class bipod, includes: metadata list containing sample name breakpoints (provided). counts data frame additional group column, indicates grouping time steps based provided breakpoints.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a biPOD Object — init","text":"Initializes biPOD object data frame containing population counts different time points, along sample name optional breakpoints.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_bayes_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Bayes Factor Over Input Data — plot_bayes_factor","title":"Plot Bayes Factor Over Input Data — plot_bayes_factor","text":"Generates plot Bayes Factor (BF) based fitted model bipod object. plot can include categories interpreting Bayes Factor according Jeffreys' scale evidence.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_bayes_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Bayes Factor Over Input Data — plot_bayes_factor","text":"","code":"plot_bayes_factor(x, with_categories = F)"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_bayes_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Bayes Factor Over Input Data — plot_bayes_factor","text":"x bipod object contains results fitted model, including Bayes Factor best growth model metadata. with_categories logical value indicating whether include Bayes Factor significance categories based Jeffreys' scale. TRUE, plot use categories interpret Bayes Factor. (default FALSE)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_bayes_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Bayes Factor Over Input Data — plot_bayes_factor","text":"ggplot2 object displaying Bayes Factor significance, optionally categorized.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_breakpoints_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Posterior Distributions of Inferred Breakpoints — plot_breakpoints_posterior","title":"Plot Posterior Distributions of Inferred Breakpoints — plot_breakpoints_posterior","text":"Generates plot showing posterior distributions inferred breakpoints fitted model. plot can include density estimates optional histograms better visualization.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_breakpoints_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Posterior Distributions of Inferred Breakpoints — plot_breakpoints_posterior","text":"","code":"plot_breakpoints_posterior(x, with_histogram = F, alpha = 0.6, colors = NULL)"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_breakpoints_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Posterior Distributions of Inferred Breakpoints — plot_breakpoints_posterior","text":"x bipod object contains 'breakpoints_fit' field, includes posterior samples inferred breakpoints. with_histogram logical value indicating whether overlay histograms breakpoint samples density plots. default FALSE. alpha numeric value 0 1 specifying transparency level density plot. default 0.6. colors character vector specifying colors use different inferred breakpoints. NULL, default color 'darkgray' used breakpoints.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_breakpoints_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Posterior Distributions of Inferred Breakpoints — plot_breakpoints_posterior","text":"ggplot2 object displaying posterior distributions inferred breakpoints. plot shows density estimates optionally histograms breakpoints.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_elbo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Logarithm of the ELBO and Delta ELBO Mean — plot_elbo","title":"Plot the Logarithm of the ELBO and Delta ELBO Mean — plot_elbo","text":"Plots logarithm Evidence Lower Bound (ELBO) mean change ELBO (delta ELBO) iterations variational inference. helps assess convergence quality variational fit examining ELBO values evolve iterations.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_elbo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Logarithm of the ELBO and Delta ELBO Mean — plot_elbo","text":"","code":"plot_elbo(x, elbo_data, diagnose = TRUE)"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_elbo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Logarithm of the ELBO and Delta ELBO Mean — plot_elbo","text":"x bipod object contains fitted model ELBO data. elbo_data data frame tibble containing ELBO values corresponding delta ELBO mean iterations. Must include columns iter, ELBO, delta_ELBO_mean. diagnose logical value indicating whether color plot based convergence ELBO. TRUE, plot include color coding indicate whether ELBO converged (green convergence, red lack convergence). (default TRUE)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_elbo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Logarithm of the ELBO and Delta ELBO Mean — plot_elbo","text":"ggplot2 object displaying ELBO delta ELBO mean traces. plot includes line variable color coding indicate convergence.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Model Fit with Input Data — plot_fit","title":"Visualize Model Fit with Input Data — plot_fit","text":"Creates comprehensive visualization model fit overlaid input data. plot can include multiple visualization elements: Main plot showing data points model fit confidence intervals Optional zoomed-view observations Optional secondary x-axis alternative time scales Optional time window highlights Optional posterior distribution t0 parameter","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model Fit with Input Data — plot_fit","text":"","code":"plot_fit(   x,   CI = 0.95,   legend_labels = NULL,   legend_title = \"group\",   zoom = TRUE,   full_process = TRUE,   sec_axis_breaks = NULL,   sec_axis_labels = NULL,   t0_posterior_color = \"darkorange\",   shadows_colors = NULL )"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model Fit with Input Data — plot_fit","text":"x bipod object containing 'fit' field model results CI Numeric value 0 1 specifying confidence interval width fit line. example, 0.95 shows 95% confidence interval. Defaults 0.95 legend_labels Character vector providing custom labels group x$counts$group. Must match number unique groups. Defaults NULL legend_title Character string specifying title plot legend. Defaults \"group\" zoom Logical indicating whether include zoomed-panel focusing observation period. Defaults TRUE full_process Logical indicating whether display posterior distribution t0 parameter. Defaults TRUE sec_axis_breaks Numeric vector specifying positions breaks secondary x-axis. Must provided together sec_axis_labels. Defaults NULL sec_axis_labels Character vector providing labels secondary x-axis breaks. Must provided together sec_axis_breaks. Defaults NULL t0_posterior_color Character string specifying color t0 posterior distribution plot. Defaults \"darkorange\" shadows_colors Character vector specifying colors highlighting different time windows plot. Defaults NULL","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Model Fit with Input Data — plot_fit","text":"ggplot2 object containing visualization","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Population Counts Over Time — plot_input","title":"Plot Population Counts Over Time — plot_input","text":"Generates plot population counts time bipod object. function allows customization plot, including option display counts logarithmic scale highlight different groups categories within data. plot visualizes evolution population counts time point, helping understand trends fluctuations time.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Population Counts Over Time — plot_input","text":"","code":"plot_input(x, log_scale = F, add_highlights = F)"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Population Counts Over Time — plot_input","text":"x bipod object containing population count data. object must include counts field columns time (time points) count (population counts). log_scale logical value indicating whether apply logarithmic scale y-axis. TRUE, y-axis transformed logarithmic scale, can help visualize data large differences magnitude. FALSE (default), y-axis use linear scale. add_highlights logical value indicating whether highlight different groups within population data. TRUE, plot include additional visual elements differentiate groups categories. FALSE (default), highlighting applied.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Population Counts Over Time — plot_input","text":"ggplot2 object representing evolution population counts time. plot include lines points population counts can customized based provided arguments.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_mixture_model_omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Omega Values from Mixture Model Fit — plot_mixture_model_omega","title":"Plot Omega Values from Mixture Model Fit — plot_mixture_model_omega","text":"Generates plot omega values obtained fitting mixture model data bipod object. plot type can customized show histogram, violin plot, boxplot.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_mixture_model_omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Omega Values from Mixture Model Fit — plot_mixture_model_omega","text":"","code":"plot_mixture_model_omega(x, plot_type = \"hist\", color = \"maroon\")"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_mixture_model_omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Omega Values from Mixture Model Fit — plot_mixture_model_omega","text":"x bipod object. Must contain 'fit' field 'omega_mixture_model' field metadata. plot_type character string specifying type plot generate. Options \"hist\" histogram, \"violin\" violin plot, \"boxplot\" boxplot. (default 'hist') color character string specifying color use plot elements. (default 'maroon')","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_mixture_model_omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Omega Values from Mixture Model Fit — plot_mixture_model_omega","text":"ggplot2 object displaying plot omega values.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_normalized_growth_rate_posteriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Normalized Growth Rate Posterior Distributions — plot_normalized_growth_rate_posteriors","title":"Visualize Normalized Growth Rate Posterior Distributions — plot_normalized_growth_rate_posteriors","text":"Creates visualization comparing posterior distributions growth rates across different groups. distributions normalized peaks align 1.0, making easier compare shapes spreads. plot can optionally include prior distribution reference.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_normalized_growth_rate_posteriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Normalized Growth Rate Posterior Distributions — plot_normalized_growth_rate_posteriors","text":"","code":"plot_normalized_growth_rate_posteriors(   x,   add_prior = F,   legend_labels = NULL,   legend_title = \"group\",   colors = NULL )"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_normalized_growth_rate_posteriors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Normalized Growth Rate Posterior Distributions — plot_normalized_growth_rate_posteriors","text":"x bipod object containing 'fit' field model results add_prior Logical indicating whether overlay prior distribution plot. Defaults FALSE legend_labels Character vector providing custom labels growth rate parameter. Must match number parameters. NULL, uses rho_i format. Defaults NULL legend_title Character string specifying title plot legend. Defaults \"group\" colors Character vector specifying colors different growth rate distributions. NULL, uses default color palette. Defaults NULL","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_normalized_growth_rate_posteriors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Normalized Growth Rate Posterior Distributions — plot_normalized_growth_rate_posteriors","text":"ggplot2 object showing normalized posterior density plots","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_normalized_growth_rate_posteriors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Normalized Growth Rate Posterior Distributions — plot_normalized_growth_rate_posteriors","text":"normalization process scales distribution maximum density equals 1. allows easy comparison distribution shapes regardless original scales. prior distribution, included, also normalized way.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Posterior Density for a Specific Parameter — plot_posterior","title":"Plot Posterior Density for a Specific Parameter — plot_posterior","text":"Creates density plot posterior distribution specified parameter fitted model within bipod object. plot helps visualize distribution parameter values fitting model, indicating uncertainty parameter estimate. function particularly useful exploring posterior distribution individual model parameters Bayesian analysis.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Posterior Density for a Specific Parameter — plot_posterior","text":"","code":"plot_posterior(x, x_fit, par_name, color = \"black\")"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Posterior Density for a Specific Parameter — plot_posterior","text":"x bipod object class bipod. must contain 'fit' field, includes fitted model results. object fitted using model selection techniques. x_fit fit object within x contains desired parameter. include fitted parameter values associated diagnostics. par_name character string specifying name parameter whose posterior distribution plotted. match one parameter names available model fit. color character string specifying color use density plot. default 'black'. color used filling density plot, specified level transparency.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Posterior Density for a Specific Parameter — plot_posterior","text":"ggplot2 object representing density plot specified parameter. plot displays posterior distribution helps assess uncertainty parameter estimate.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posteriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Posterior Densities for Multiple Parameters — plot_posteriors","title":"Plot Posterior Densities for Multiple Parameters — plot_posteriors","text":"Generates density plots posterior distributions multiple parameters fitted model within bipod object. function can optionally overlay histograms posterior samples top density plots better visual comparison distribution. useful want examine posterior distributions several parameters simultaneously.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posteriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Posterior Densities for Multiple Parameters — plot_posteriors","text":"","code":"plot_posteriors(   x,   x_fit,   par_list,   with_histogram = F,   alpha = 0.6,   colors = NULL )"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posteriors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Posterior Densities for Multiple Parameters — plot_posteriors","text":"x bipod object class bipod. must contain 'fit' field fitted model associated results. object undergone model selection fitting. x_fit fit object within x contains desired parameters. holds fitted values parameters plotted. par_list character vector containing names parameters whose posterior distributions plotted. match parameter names available model fit. with_histogram logical value indicating whether overlay histograms density plots. TRUE, histograms displayed alongside density plots give clearer visualization sample distribution. default FALSE. alpha numeric value 0 1 specifying transparency level density plots. lower value (e.g., 0.2) make density plot transparent, higher value (e.g., 0.8) make opaque. default 0.6. colors character vector specifying colors use density plots parameter. NULL (default), predefined color scheme used. length vector match number parameters par_list.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_posteriors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Posterior Densities for Multiple Parameters — plot_posteriors","text":"ggplot2 object displaying density plots specified parameters. with_histogram TRUE, histograms overlaid density plots.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Comprehensive Model Analysis Report — plot_report","title":"Generate a Comprehensive Model Analysis Report — plot_report","text":"Creates multi-panel visualization report combines key analytical plots single comprehensive display. report can include: Model fit visualization confidence intervals Breakpoint posterior distributions (breakpoints inferred) Growth rate posterior distributions Model selection diagnostics (multiple models compared) component automatically included based available data analysis bipod object, creating tailored summary modeling results.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Comprehensive Model Analysis Report — plot_report","text":"","code":"plot_report(   x,   fit_type = \"complex\",   breakpoints_color = \"darkgray\",   shadows_colors = NULL,   t0_posterior_color = \"darkorange\",   full_process = FALSE )"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Comprehensive Model Analysis Report — plot_report","text":"x bipod object must contain: * 'fit' field model fitting results * metadata fields model selection information * Optional: breakpoints analysis results * Optional: ELBO values variational inference fit_type Character string controlling fit plot complexity: * \"simple\": Basic fit visualization * \"complex\": Detailed fit visualization additional elements Default \"complex\" breakpoints_color Character string specifying color breakpoint posterior visualization. Default \"darkgray\" shadows_colors Character vector defining colors time window highlighting fit plot. Default NULL t0_posterior_color Character string specifying color t0 (initial time) posterior visualization. Default \"darkorange\" full_process Logical indicating whether show complete process details simple fit plots. applies fit_type = \"simple\". Default FALSE","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Comprehensive Model Analysis Report — plot_report","text":"patchwork object containing: Main panel: Model fit visualization Secondary panels (applicable): Breakpoint posterior distributions Growth rate posterior distributions Model selection results panels arranged vertically appropriate size ratios","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Comprehensive Model Analysis Report — plot_report","text":"function automatically adapts output based analyses present input bipod object: Breakpoint analysis panels appear breakpoints inferred Model selection panels appear multiple models compared Panel heights automatically adjusted optimal visualization","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_t0_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize t0 Parameter Posterior Distribution — plot_t0_posterior","title":"Visualize t0 Parameter Posterior Distribution — plot_t0_posterior","text":"Creates visualization posterior distribution t0 parameter, represents theoretical start time growth process. plot can optionally include prior distribution comparison.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_t0_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize t0 Parameter Posterior Distribution — plot_t0_posterior","text":"","code":"plot_t0_posterior(x, add_prior = F)"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_t0_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize t0 Parameter Posterior Distribution — plot_t0_posterior","text":"x bipod object containing 'fit' field model results add_prior Logical indicating whether overlay prior distribution plot. Defaults FALSE","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_t0_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize t0 Parameter Posterior Distribution — plot_t0_posterior","text":"ggplot2 object showing posterior density plot t0","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_t0_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize t0 Parameter Posterior Distribution — plot_t0_posterior","text":"function applicable t0 inferred model fitting (.e., x$metadata$t0_inferred TRUE). plot shows full posterior distribution, allowing assessment uncertainty estimated start time. prior included, helps visualize data updated beliefs t0.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Traces of Specified Parameters from a Fitted Stan Model — plot_traces","title":"Plot Traces of Specified Parameters from a Fitted Stan Model — plot_traces","text":"Generates trace plots specified parameters fitted Stan model contained within bipod object. plots visualize sampled values parameters across MCMC iterations chain, helping assess convergence.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Traces of Specified Parameters from a Fitted Stan Model — plot_traces","text":"","code":"plot_traces(x, fit, pars = c(), diagnose = FALSE)"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_traces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Traces of Specified Parameters from a Fitted Stan Model — plot_traces","text":"x bipod object contains least one fitted Stan model. must include metadata parameters related MCMC sampling process. fit fit object within bipod object, containing MCMC results, including draws parameters. pars character vector specifying names parameters plot. empty, available parameters plotted. diagnose logical value indicating whether color plots based convergence diagnostics. TRUE, plots include color coding based R-hat convergence statistic, red indicating problematic parameters (R-hat > 1.01). (default FALSE)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_traces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Traces of Specified Parameters from a Fitted Stan Model — plot_traces","text":"ggplot2 object displaying trace plots specified parameters. plot includes lines chain, optional color coding based convergence.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_two_pop_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Fit Over the Input Data for Two Populations — plot_two_pop_fit","title":"Plot the Fit Over the Input Data for Two Populations — plot_two_pop_fit","text":"Creates plot fit input data model two populations. plot can display fit population separately optionally include posteriors key parameters.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_two_pop_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Fit Over the Input Data for Two Populations — plot_two_pop_fit","text":"","code":"plot_two_pop_fit(   x,   CI = 0.95,   f_posteriors = TRUE,   t_posteriors = TRUE,   r_posteriors = TRUE,   split_process = TRUE,   resistant_color = \"steelblue\",   sensitive_color = \"indianred\" )"},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_two_pop_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Fit Over the Input Data for Two Populations — plot_two_pop_fit","text":"x bipod object. Must contain 'two_pop_fit' field. CI Numeric value representing confidence interval growth rate plot. (default 0.95) f_posteriors . t_posteriors . r_posteriors . split_process Logical value indicating whether plot dynamics two populations separately. (default FALSE) resistant_color . sensitive_color .","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/plot_two_pop_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Fit Over the Input Data for Two Populations — plot_two_pop_fit","text":"ggplot2 object showing fit input data.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/print.bipod.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Class 'bipod' — print.bipod","title":"Print Method for Class 'bipod' — print.bipod","text":"Custom print method objects class bipod. method prints summary bipod object, including details number observations, number time windows, status various tasks (breakpoints inference, two-population inference, single-population inference). also provides summaries inferred parameters, including mean values, standard deviations, quantiles, Rhat values inference task.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/print.bipod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Class 'bipod' — print.bipod","text":"","code":"# S3 method for class 'bipod' print(x, ...)"},{"path":"https://caravagnalab.github.io/biPOD/reference/print.bipod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Class 'bipod' — print.bipod","text":"x object class bipod. object must contain various elements including metadata, counts, fitted model objects fit, breakpoints_fit, two_pop_fit. ... Additional parameters default S3 method (used).","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/print.bipod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Class 'bipod' — print.bipod","text":"Nothing. function prints output console, providing detailed summary bipod object.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/print.bipod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Method for Class 'bipod' — print.bipod","text":"print.bipod function summarizes key information bipod object, : number observations time windows dataset. inference tasks performed, including breakpoints inference, two-population inference, single-population inference. Rhat values, mean, standard deviation, quantiles (5%, 50%, 95%) inferred parameters task. status task (pass fail), including use variational sampling scale factors. function uses cli package format output colors visual enhancements.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","title":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","text":"Simulates stochastic birth-death process multiple time steps, models population dynamics environment birth death rates can vary time. process follows exponential growth model, population size fluctuates due random birth death events.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","text":"","code":"sim_stochastic_exponential(n0, lambda, mu, steps, delta_t)"},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","text":"n0 Numeric value indicating initial population size time 0. must non-negative integer (>= 0). lambda Numeric vector scalar specifying birth rates time step. scalar provided, assumed constant time steps. vector provided, length steps, specifying birth rate step. mu Numeric vector scalar specifying death rates time step. Like lambda, scalar provided, assumed constant time steps. vector provided, length steps, specifying death rate step. steps Integer specifying number time steps simulate. Must non-negative integer. delta_t Numeric vector scalar specifying time step sizes. scalar provided, assumed constant steps. vector provided, length steps, specifying time step size step.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","text":"tibble following columns: time: cumulative time step, starting 0. count: population size time step, calculated applying stochastic birth-death process. group: factor groups contiguous intervals birth death rates constant (.e., lambda mu remain consecutive time steps).","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_exponential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","text":"function simulates population following exponential growth model, population size changes due random births deaths. rates birth (lambda) death (mu) may vary time. time step, function computes expected number births deaths based rates lambda mu. random draw made determine whether birth death event occurs. population size updated accordingly. simulation assumes population size never negative, death event causes population drop zero, remain zero thereafter. steps set 0, function returns initial population size n0 immediately, without simulation.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Stochastic Birth-Death Process (Exponential Growth) — sim_stochastic_exponential","text":"","code":"# Simulate a stochastic birth-death process with constant rates sim_stochastic_exponential(n0 = 10, lambda = 0.2, mu = 0.1, steps = 10, delta_t = 1) #> # A tibble: 11 × 3 #>     time count group #>    <dbl> <dbl> <dbl> #>  1     0    10     0 #>  2     1    14     0 #>  3     2    19     0 #>  4     3    25     0 #>  5     4    24     0 #>  6     5    28     0 #>  7     6    29     0 #>  8     7    32     0 #>  9     8    41     0 #> 10     9    54     0 #> 11    10    54     0  # Simulate with varying rates lambda_rates <- c(rep(0.3, 5), rep(0.1, 5), rep(0.9, 5)) mu_rates <- c(rep(0.1, 5), rep(0.15, 5), rep(0.3, 5)) sim_stochastic_exponential(n0 = 10, lambda = lambda_rates, mu = mu_rates, steps = 15, delta_t = .1) #> # A tibble: 16 × 3 #>     time count group #>    <dbl> <dbl> <dbl> #>  1   0      10     0 #>  2   0.1    11     0 #>  3   0.2    12     0 #>  4   0.3    14     0 #>  5   0.4    16     0 #>  6   0.5    19     0 #>  7   0.6    18     1 #>  8   0.7    18     1 #>  9   0.8    19     1 #> 10   0.9    18     1 #> 11   1      18     1 #> 12   1.1    20     2 #> 13   1.2    21     2 #> 14   1.3    20     2 #> 15   1.4    21     2 #> 16   1.5    24     2"},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","title":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","text":"Simulates population growth multiple time steps using stochastic logistic growth model. model incorporates stochastic elements carrying capacity describe population dynamics. Population size changes due random births deaths, growth rate constrained carrying capacity \\(K\\).","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","text":"","code":"sim_stochastic_logistic(n0, lambda, mu, K, steps, delta_t)"},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","text":"n0 Numeric value indicating initial population size time 0. must non-negative integer (>= 0). lambda Numeric vector scalar specifying birth rates time step. scalar provided, assumed constant time steps. vector provided, length steps, specifying birth rate step. mu Numeric vector scalar specifying death rates time step. Like lambda, scalar provided, assumed constant time steps. vector provided, length steps, specifying death rate step. K Numeric value indicating carrying capacity environment. must non-negative integer (> 0). steps Integer specifying number time steps simulate. Must non-negative integer. delta_t Numeric vector scalar specifying time step sizes. scalar provided, assumed constant steps. vector provided, length steps, specifying time step size step.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","text":"tibble following columns: time: cumulative time step, starting 0. count: population size time step, updated based stochastic logistic model. group: factor groups contiguous intervals birth death rates constant (.e., lambda mu remain consecutive time steps).","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_logistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","text":"function simulates population following stochastic logistic growth model, population size changes due random births deaths constrained carrying capacity \\(K\\). population's growth rate decreases population size approaches \\(K\\), representing limitations resources. rates birth (lambda) death (mu) may vary time. stochastic component model introduces randomness, making population size fluctuate time steps. time step, birth death rates used calculate expected population change, random event (birth death) chosen based probabilities step. population updated accordingly. simulation stops population reaches zero specified number steps completed. steps set 0, function returns initial population size n0 immediately, without simulation.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/sim_stochastic_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Population Growth with Stochastic Logistic Dynamics — sim_stochastic_logistic","text":"","code":"# Simulate a stochastic logistic growth process with constant rates and carrying capacity of 100 sim_stochastic_logistic(n0 = 10, lambda = 0.2, mu = 0.1, K = 100, steps = 15, delta_t = .25) #> # A tibble: 16 × 3 #>     time count group #>    <dbl> <dbl> <dbl> #>  1  0       10     0 #>  2  0.25    10     0 #>  3  0.5     11     0 #>  4  0.75    10     0 #>  5  1       10     0 #>  6  1.25    12     0 #>  7  1.5     10     0 #>  8  1.75     9     0 #>  9  2       10     0 #> 10  2.25    11     0 #> 11  2.5     12     0 #> 12  2.75    11     0 #> 13  3       10     0 #> 14  3.25     9     0 #> 15  3.5     10     0 #> 16  3.75    11     0  # Simulate with varying rates lambda_rates <- c(rep(0.3, 5), rep(0.1, 5), rep(0.9, 5)) mu_rates <- c(rep(0.1, 5), rep(0.15, 5), rep(0.3, 5)) sim_stochastic_logistic( n0 = 10, lambda = lambda_rates, mu = mu_rates, steps = 15, delta_t = .1, K=200 ) #> # A tibble: 16 × 3 #>     time count group #>    <dbl> <dbl> <dbl> #>  1   0      10     0 #>  2   0.1    12     0 #>  3   0.2    13     0 #>  4   0.3    14     0 #>  5   0.4    12     0 #>  6   0.5    13     0 #>  7   0.6    13     1 #>  8   0.7    14     1 #>  9   0.8    13     1 #> 10   0.9    14     1 #> 11   1      14     1 #> 12   1.1    17     2 #> 13   1.2    19     2 #> 14   1.3    23     2 #> 15   1.4    25     2 #> 16   1.5    26     2"},{"path":"https://caravagnalab.github.io/biPOD/reference/xenografts.html","id":null,"dir":"Reference","previous_headings":"","what":"Xenografts Mouse Model Dataset — xenografts","title":"Xenografts Mouse Model Dataset — xenografts","text":"dataset containing tumor volume measurements xenograft mouse models different treatment conditions. data tracks tumor growth treated untreated mice time, measurements beginning treatment initiation.","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/xenografts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Xenografts Mouse Model Dataset — xenografts","text":"","code":"xenografts"},{"path":"https://caravagnalab.github.io/biPOD/reference/xenografts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Xenografts Mouse Model Dataset — xenografts","text":"data frame 159 rows 4 columns: mouse Unique identifier mouse study tumour_volume Measured volume tumor time Time days since treatment initiation (day 0 represents treatment start) treatment_group Binary variable indicating treatment status (treated/untreated)","code":""},{"path":"https://caravagnalab.github.io/biPOD/reference/xenografts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Xenografts Mouse Model Dataset — xenografts","text":"Data Sauer et al. https://doi.org/10.15252/emmm.202215729","code":""}]
