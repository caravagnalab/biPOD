// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "biPOD_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// birthDeathLike_log
double birthDeathLike_log(const int& m, const int& n, const double& delta_t, const double& lambda, const double& mu, std::ostream* pstream__);
RcppExport SEXP _biPOD_birthDeathLike_log(SEXP mSEXP, SEXP nSEXP, SEXP delta_tSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(birthDeathLike_log(m, n, delta_t, lambda, mu, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// birthDeathLike_rng
int birthDeathLike_rng(const int& n, const double& delta_t, const double& lambda, const double& mu, boost::ecuyer1988& base_rng__, std::ostream* pstream__);
RcppExport SEXP _biPOD_birthDeathLike_rng(SEXP nSEXP, SEXP delta_tSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP base_rng__SEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< boost::ecuyer1988& >::type base_rng__(base_rng__SEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(birthDeathLike_rng(n, delta_t, lambda, mu, base_rng__, pstream__));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4exponential_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4exponential_start_at_1_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4logistic_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4logistic_start_at_1_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_biPOD_birthDeathLike_log", (DL_FUNC) &_biPOD_birthDeathLike_log, 6},
    {"_biPOD_birthDeathLike_rng", (DL_FUNC) &_biPOD_birthDeathLike_rng, 6},
    {"_rcpp_module_boot_stan_fit4exponential_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4exponential_mod, 0},
    {"_rcpp_module_boot_stan_fit4exponential_start_at_1_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4exponential_start_at_1_mod, 0},
    {"_rcpp_module_boot_stan_fit4logistic_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4logistic_mod, 0},
    {"_rcpp_module_boot_stan_fit4logistic_start_at_1_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4logistic_start_at_1_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_biPOD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
