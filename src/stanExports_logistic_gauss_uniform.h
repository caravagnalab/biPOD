// Generated by rstantools.  Do not edit by hand.

/*
    biPOD is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    biPOD is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with biPOD.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_logistic_gauss_uniform_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_logistic_gauss_uniform");
    reader.add_event(68, 66, "end", "model_logistic_gauss_uniform");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
mean_t(const T0__& n0,
           const T1__& lambda,
           const T2__& mu,
           const T3__& K,
           const T4__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ m(DUMMY_VAR__);
        (void) m;  // dummy to suppress unused var warning
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        current_statement_begin__ = 6;
        stan::math::assign(m, ((K * n0) / (n0 + ((K - n0) * stan::math::exp((-((lambda - mu)) * dt))))));
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mean_t_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& n0,
           const T1__& lambda,
           const T2__& mu,
           const T3__& K,
           const T4__& dt, std::ostream* pstream__) const {
        return mean_t(n0, lambda, mu, K, dt, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
sigma_t(const T0__& n0,
            const T1__& lambda,
            const T2__& mu,
            const T3__& K,
            const T4__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        local_scalar_t__ s(DUMMY_VAR__);
        (void) s;  // dummy to suppress unused var warning
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        current_statement_begin__ = 13;
        local_scalar_t__ phi(DUMMY_VAR__);
        (void) phi;  // dummy to suppress unused var warning
        stan::math::initialize(phi, DUMMY_VAR__);
        stan::math::fill(phi, DUMMY_VAR__);
        current_statement_begin__ = 14;
        local_scalar_t__ psi(DUMMY_VAR__);
        (void) psi;  // dummy to suppress unused var warning
        stan::math::initialize(psi, DUMMY_VAR__);
        stan::math::fill(psi, DUMMY_VAR__);
        current_statement_begin__ = 16;
        stan::math::assign(phi, ((((n0 * stan::math::exp(((lambda - mu) * dt))) + K) - n0) / (K * stan::math::exp(((lambda - mu) * dt)))));
        current_statement_begin__ = 17;
        stan::math::assign(psi, (((((K - n0) * lambda) / (K * (lambda - mu))) * (1 - stan::math::exp((-((lambda - mu)) * dt)))) + ((mu + (n0 * dt)) / K)));
        current_statement_begin__ = 18;
        stan::math::assign(s, ((n0 * ((phi + (2 * psi)) - 1)) / pow(phi, 2)));
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::sqrt(s));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sigma_t_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& n0,
            const T1__& lambda,
            const T2__& mu,
            const T3__& K,
            const T4__& dt, std::ostream* pstream__) const {
        return sigma_t(n0, lambda, mu, K, dt, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_logistic_gauss_uniform
  : public stan::model::model_base_crtp<model_logistic_gauss_uniform> {
private:
        int S;
        double n0;
        double t0;
        std::vector<double> N;
        std::vector<double> T;
        double a;
        double b;
        double g;
        double prior_K;
public:
    model_logistic_gauss_uniform(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_logistic_gauss_uniform(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_logistic_gauss_uniform_namespace::model_logistic_gauss_uniform";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 2);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "n0", "double", context__.to_vec());
            n0 = double(0);
            vals_r__ = context__.vals_r("n0");
            pos__ = 0;
            n0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "n0", n0, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
            t0 = double(0);
            vals_r__ = context__.vals_r("t0");
            pos__ = 0;
            t0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "t0", t0, 0);
            current_statement_begin__ = 29;
            validate_non_negative_index("N", "S", S);
            context__.validate_dims("data initialization", "N", "double", context__.to_vec(S));
            N = std::vector<double>(S, double(0));
            vals_r__ = context__.vals_r("N");
            pos__ = 0;
            size_t N_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
                N[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("T", "S", S);
            context__.validate_dims("data initialization", "T", "double", context__.to_vec(S));
            T = std::vector<double>(S, double(0));
            vals_r__ = context__.vals_r("T");
            pos__ = 0;
            size_t T_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < T_k_0_max__; ++k_0__) {
                T[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "a", "double", context__.to_vec());
            a = double(0);
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            a = vals_r__[pos__++];
            check_greater_or_equal(function__, "a", a, 0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "b", "double", context__.to_vec());
            b = double(0);
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            b = vals_r__[pos__++];
            check_greater_or_equal(function__, "b", b, 0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "g", "double", context__.to_vec());
            g = double(0);
            vals_r__ = context__.vals_r("g");
            pos__ = 0;
            g = vals_r__[pos__++];
            check_greater_or_equal(function__, "g", g, 0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "prior_K", "double", context__.to_vec());
            prior_K = double(0);
            vals_r__ = context__.vals_r("prior_K");
            pos__ = 0;
            prior_K = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_K", prior_K, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_logistic_gauss_uniform() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 39;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("K")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable K missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("K");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "K", "double", context__.to_vec());
        double K(0);
        K = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable K: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 39;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lb_constrain(0, lp__);
            else
                lambda = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 40;
            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_lb_constrain(0, lp__);
            else
                mu = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 41;
            local_scalar_t__ K;
            (void) K;  // dummy to suppress unused var warning
            if (jacobian__)
                K = in__.scalar_constrain(lp__);
            else
                K = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 45;
            local_scalar_t__ ro;
            (void) ro;  // dummy to suppress unused var warning
            stan::math::initialize(ro, DUMMY_VAR__);
            stan::math::fill(ro, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 46;
            stan::math::assign(ro, (lambda - mu));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 45;
            if (stan::math::is_uninitialized(ro)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ro";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ro: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(K, prior_K, (prior_K * .1)));
            current_statement_begin__ = 52;
            lp_accum__.add(uniform_log<propto__>(lambda, (lambda - ((b - a) / g)), (lambda + ((b - a) / g))));
            current_statement_begin__ = 53;
            lp_accum__.add(uniform_log<propto__>(mu, (mu - ((b - a) / g)), (mu + ((b - a) / g))));
            current_statement_begin__ = 55;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 56;
                lp_accum__.add(normal_log<propto__>(get_base1(N, i, "N", 1), mean_t(n0, lambda, mu, K, (get_base1(T, i, "T", 1) - t0), pstream__), sigma_t(n0, lambda, mu, K, (get_base1(T, i, "T", 1) - t0), pstream__)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("mu");
        names__.push_back("K");
        names__.push_back("ro");
        names__.push_back("N_rep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_logistic_gauss_uniform_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lambda = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda);
        double mu = in__.scalar_lb_constrain(0);
        vars__.push_back(mu);
        double K = in__.scalar_constrain();
        vars__.push_back(K);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 45;
            double ro;
            (void) ro;  // dummy to suppress unused var warning
            stan::math::initialize(ro, DUMMY_VAR__);
            stan::math::fill(ro, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 46;
            stan::math::assign(ro, (lambda - mu));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(ro);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 61;
            validate_non_negative_index("N_rep", "S", S);
            std::vector<double> N_rep(S, double(0));
            stan::math::initialize(N_rep, DUMMY_VAR__);
            stan::math::fill(N_rep, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 63;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 64;
                stan::model::assign(N_rep, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_rng(mean_t(n0, lambda, mu, K, (get_base1(T, i, "T", 1) - t0), pstream__), sigma_t(n0, lambda, mu, K, (get_base1(T, i, "T", 1) - t0), pstream__), base_rng__), 
                            "assigning variable N_rep");
            }
            // validate, write generated quantities
            current_statement_begin__ = 61;
            size_t N_rep_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < N_rep_k_0_max__; ++k_0__) {
                vars__.push_back(N_rep[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_logistic_gauss_uniform";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "K";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ro";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t N_rep_k_0_max__ = S;
        for (size_t k_0__ = 0; k_0__ < N_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "N_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "K";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ro";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t N_rep_k_0_max__ = S;
        for (size_t k_0__ = 0; k_0__ < N_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "N_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_logistic_gauss_uniform_namespace::model_logistic_gauss_uniform stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
